var documenterSearchIndex = {"docs":
[{"location":"description/#Set-Description","page":"Set Description","title":"Set Description","text":"","category":"section"},{"location":"description/","page":"Set Description","title":"Set Description","text":"This segment concentrates on generating detailed set descriptions. Combined with set events, these descriptions are essential for intuitively comprehending the reasons behind set membership outcomes in complex situations. Using \"println(describe(C))\" displays the details of set C's construction.: { x ∈ A | 0 < x < 4 }, where A = { x ∈ ::Integer } ∩ { x ∈ A | 1 < x < 5 }, where A = { x ∈ ::Integer }","category":"page"},{"location":"creation/#Set-Creation","page":"Set Creation","title":"Set Creation","text":"","category":"section"},{"location":"creation/","page":"Set Creation","title":"Set Creation","text":"This part demonstrates the \"@setbuild\" macro in SetBuilders for creating sets from Julia data types, predicates, and mappings. For example, \"I = @setbuild(Integer)\" creates a set of all Julia Integer type objects, and \"A = @setbuild(x ∈ I, 0 < x < 4)\" creates a set that implies to contain the integers 1, 2, and 3.","category":"page"},{"location":"event/#Membership-Event","page":"Membership Event","title":"Membership Event","text":"","category":"section"},{"location":"event/","page":"Membership Event","title":"Membership Event","text":"This section introduces event handlers that activate in response to the outcomes of membership tests and their applications in different scenarios. For example, using \"ismember(C, 1, onnotamember=(hist -> println(describe(hist[1].set, mark=hist[end].set))))\" displays the details of set C's construction, pinpointing the specific set that failed the membership test. { x ∈ A | 0 < x < 4 }, where A = { x ∈ ::Integer } ∩ => { x ∈ A | 1 < x < 5 }, where A = { x ∈ ::Integer }","category":"page"},{"location":"sharing/#Set-Sharing","page":"Set Sharing","title":"Set Sharing","text":"","category":"section"},{"location":"sharing/","page":"Set Sharing","title":"Set Sharing","text":"Introduces a Julia module extension for creating, saving, and sharing sets as files to facilitate collaboration among users.","category":"page"},{"location":"mapping/#Element-Mappings","page":"Element Mappings","title":"Element Mappings","text":"","category":"section"},{"location":"mapping/","page":"Element Mappings","title":"Element Mappings","text":"MappedSet contains a map that associates each element in the domain with zero or more elements in the codomain, known as a forward map. It also includes a backward map for reverse mapping. Elements can be generated using these maps.","category":"page"},{"location":"developer/#Developer-Documentaion","page":"Developer Documentation","title":"Developer Documentaion","text":"","category":"section"},{"location":"developer/#Extending-SetBuilders","page":"Developer Documentation","title":"Extending SetBuilders","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [SetBuilders]\nPrivate = false","category":"page"},{"location":"reference/#SetBuilders.SetBuilders","page":"Reference","title":"SetBuilders.SetBuilders","text":"Main module for SetBuilders.jl – predicate-based set generation package for Julia.\n\n\n\n\n\n","category":"module"},{"location":"reference/#SetBuilders.SBSet","page":"Reference","title":"SetBuilders.SBSet","text":"SBSet - Type\n\nThe SBSet type is the supertype of all SetBuilders set types.\n\nExamples\n\njulia> I = @setbuild(Integer)\nTypeSet(Integer)\n\njulia> I isa SBSet\ntrue\n\n\n\n\n\n","category":"type"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.CompositeSet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::CompositeSet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> I = @setbuild(Integer)\nTypeSet(Integer)\n\njulia> A = @setbuild(x in I, 0 <= x < 10)\nPredicateSet((x ∈ TypeSet(Integer)) where 0 <= x < 10)\n\njulia> B = @setbuild(x in I, 5 <= x < 15)\nPredicateSet((x ∈ TypeSet(Integer)) where 5 <= x < 15)\n\njulia> C = A ∩ B\nCompositeSet(PredicateSet((x ∈ TypeSet(Integer)) where 0 <= x < 10) ∩ PredicateSet((x ∈ TypeSet(Integer)) where 5 <= x < 15))\n\njulia> is_member(C, 5) # 5 in C\ntrue\n\njulia> is_member(C, 0) # 0 in C\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.EmptySet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::EmptySet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> E = @setbuild()\nEmptySet()\n\njulia> is_member(E, 1)   # 1 in E\nfalse\n\njulia> is_member(E, 0.1) # 0.1 in E\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.EnumerableSet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::EnumerableSet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> A = @setbuild(Union{Int64, Float64}[1])\nEnumerableSet([{Float64}*0, {Int64}*1])\n\njulia> is_member(A, 1)\ntrue\n\njulia> is_member(A, Int32(1))\nfalse\n\njulia> push!(A, Float64(2.0))\nEnumerableSet([{Float64}*1, {Int64}*1])\n\njulia> is_member(A, Float64(2.0))\ntrue\n\njulia> pop!(A, Float64(2.0))\n2.0\n\njulia> is_member(A, Float64(2.0))\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.MappedSet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::MappedSet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> I = @setbuild(Integer)\nTypeSet(Integer)\n\njulia> struct MyStruct\n       a\n       b\n       end\n\njulia> S = @setbuild(MyStruct)\nTypeSet(MyStruct)\n\njulia> A = @setbuild(s in S, (x in I, y in I) -> mystruct(x,y), s -> (s.a, s.b),\n                     mystruct=MyStruct)\nMappedSet((x ∈ TypeSet(Integer)), (y ∈ TypeSet(Integer)) -> (s ∈ TypeSet(MyStruct)))\n\njulia> is_member(A, MyStruct(1, 1))   # MyStruct(1, 1) in A\ntrue\n\njulia> is_member(A, MyStruct(1.0, 1)) # MyStruct(1.0, 1) in A\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.PredicateSet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::PredicateSet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> I = @setbuild(Integer)\nTypeSet(Integer)\n\njulia> A = @setbuild(x in I, 0 <= x < 10)\nPredicateSet((x ∈ TypeSet(Integer)) where 0 <= x < 10)\n\njulia> is_member(A, 0)  # 0 in A \ntrue\n\njulia> is_member(A, 10) # 10 in A\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.TypeSet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::TypeSet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> I = @setbuild(Integer)\nTypeSet(Integer)\n\njulia> is_member(I, 1)   # 1 in I\ntrue\n\njulia> is_member(I, 0.1) # 0.1 in I\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.is_member-Tuple{SetBuilders.UniversalSet, Any}","page":"Reference","title":"SetBuilders.is_member","text":"is_member(set::UniversalSet, elem; kwargs...)\n\nCheck if elem is a member of set\n\nExamples\n\njulia> U = @setbuild(Any)\nUniversalSet()\n\njulia> is_member(U, 1)   # 1 in U\ntrue\n\njulia> is_member(U, 0.1) # 0.1 in U\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/#SetBuilders.@setbuild-Tuple","page":"Reference","title":"SetBuilders.@setbuild","text":"@setbuild([args...[; kwargs...]])\n\nThe @setbuild macro creates various SetBuilders sets.\n\nThe @setbuild macro in SetBuilders for creating sets from Julia data types, predicates, and mappings. For example, I = @setbuild(Integer) creates a set of all Julia Integer type objects, and A = @setbuild(x ∈ I, 0 < x < 4) creates a set that implies to contain the integers 1, 2, and 3.\n\nExamples\n\njulia> E = @setbuild()\nEmptySet()\n\njulia> U = @setbuild(Any)\nUniversalSet()\n\njulia> I = @setbuild(Integer) # Julia Integer-type set\nTypeSet(Integer)\n\njulia> D = @setbuild(Dict{String, Number}) # Julia Dict{String, Number}-type set\nTypeSet(Dict{String, Number})\n\njulia> struct MyStruct\n           a\n           b\n       end\n\njulia> S = @setbuild(MyStruct)  # Julia user-type set\nTypeSet(MyStruct)\n\njulia> N = @setbuild([1, 2, 3]) # Enumerable set\nEnumerableSet([{Int64}*3])\n\njulia> C = @setbuild((I, I))  # Cartesian sets\nPredicateSet((c1 ∈ TypeSet(Integer)), (c2 ∈ TypeSet(Integer)) where true)\n\njulia> P = @setbuild(x in I, 0 <= x < 10) # Predicate sets\nPredicateSet((x ∈ TypeSet(Integer)) where 0 <= x < 10)\n\njulia> M = @setbuild(z in I, (x in P) -> x + 5, z -> z - 5) # Mapped sets\nMappedSet((x ∈ PredicateSet((x ∈ TypeSet(Integer)) where 0 <= x < 10)) -> (z ∈ TypeSet(Integer)))\n\n\n\n\n\n","category":"macro"},{"location":"reference/#SetBuilders.@setpkg-Tuple","page":"Reference","title":"SetBuilders.@setpkg","text":"@setpkg command[ command-arguments... ]\n\nThe @setpkg macro enables the reuse of sets that were developed separately.\n\ncommands\n\nload: loads sets from a local file, also known as a setfile\n\n@setpkg load <path/to/file>\n\nThe setfile is a regular Julia module customized for SetBuilders.\n\nExamples\n\nAssuming that the file myset.sjl contains the following Julia code:\n\nmodule MySetModule\n\nexport MYSET\n\nI = @setbuild(Integer)\nMYSET = @setbuild(x in I, x > 0)\n\nend\n\nMYSET can be used as shown in the example below:\n\njulia> @setpkg load \"myset.sjl\"\n\njulia> using SetBuilders.MySetModule\n\njulia> 1 in MYSET\ntrue\n\njulia> 0 in MYSET\nfalse\n\n\n\n\n\n","category":"macro"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"CurrentModule = SetBuilders","category":"page"},{"location":"#SetBuilders","page":"SetBuilders Documentation","title":"SetBuilders","text":"","category":"section"},{"location":"#In-a-nutshell...","page":"SetBuilders Documentation","title":"In a nutshell...","text":"","category":"section"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"SetBuilders provides Julia users with the power of predicate-based sets.","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"Many programming languages, including Julia, support a type of enumerable sets but not predicate sets in the mathematical sense. For instance, in Julia, it's possible to create a set containing integer values, such as","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"A = Set([1,2,3])","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"However, creating the following is not possible:","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"A = Set(x ∈ Integer | 0 < x < 4)","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"With the SetBuilders package, Julia users can create predicate sets, compose them using set operations such as unions and intersections, and check if an object is a member of the set.","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"I = @setbuild(Integer)           # creates a set from Julia Integer type\nA = @setbuild(x ∈  I, 0 < x < 4) # creates a set with the predicate of \"0 < x < 4\"\nB = @setbuild(x in I, 2 < x < 6) # creates a set with the predicate of \"2 < x < 6\"\nC = A ∩ B                        # creates an intersection with the two sets\n@assert 3 ∈ C                    # => true, 3 is a member of the set C\n@assert !(4 in C)                # => true, 4 is not a member of the set C","category":"page"},{"location":"#Sets-in-Mathematics","page":"SetBuilders Documentation","title":"Sets in Mathematics","text":"","category":"section"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"Set theory, established by Georg Cantor in the late 19th century, is often regarded as the language of mathematics. It introduces the concept of a set as a collection of distinct objects and provides basic operations such as union, intersection, and difference. The evolution of set theory, marked by milestones like Cantor's work, Russell's Paradox, and the development of the Zermelo-Fraenkel Set Theory (ZF), has shaped it into a robust, axiomatic framework. This transformation solidified set theory's role as the universal language for expressing and structuring mathematical ideas, making it fundamental to the development and understanding of various mathematical disciplines.","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"In modern mathematics, set theory's influence is all-encompassing. It is the framework within which most mathematical concepts and theories are formulated and discussed. From the abstract structures in algebra to the nuanced concepts in topology and analysis, set theory provides the essential vocabulary and syntax. It underpins the formation of groups, rings, and fields in algebra, the characterization of space in topology, and the rigorous foundation of calculus in analysis. This universality showcases set theory as not just a branch of mathematics but as the foundational dialect through which mathematics expresses itself.","category":"page"},{"location":"#Sets-in-Programming","page":"SetBuilders Documentation","title":"Sets in Programming","text":"","category":"section"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"In programming languages like Julia and C++, the set data structure serves a specific yet crucial function, primarily focused on managing collections of unique elements. For instance, in Julia, converting an array to a set to eliminate duplicates is straightforward: my_set = Set(my_array). In C++, the Standard Template Library (STL) provides a set container that automatically removes duplicates and maintains element order, instantiated with std::set<int> my_set(my_array, my_array + array_size);.","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"However, the application of sets in programming languages is more limited compared to their comprehensive role in mathematics. In mathematics, set theory is a fundamental discipline with wide-ranging implications. In contrast, programming primarily utilizes sets for pragmatic tasks like data manipulation and storage. While indispensable within their scope, these uses do not capture the broad and abstract nature of mathematical set theory. Consequently, sets in programming, despite their utility, represent a more confined aspect of the extensive and foundational role they play in mathematics.","category":"page"},{"location":"#SetBuilders:-Harnessing-the-Power-of-Predicate-Based-Sets","page":"SetBuilders Documentation","title":"SetBuilders: Harnessing the Power of Predicate-Based Sets","text":"","category":"section"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"Set, vital in math, finds new life in programming with Julia's SetBuilders. This tool innovatively allows sets to be defined not just by listing elements but also through predicates - logical formulas yielding true for set members. Predicates in Julia can be any expression yielding a Boolean result, thus enabling sophisticated set definitions through set operations. Additionally, SetBuilders offers features such as event handlers and customizable set descriptions, greatly enhancing its utility.","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"SetBuilders introduction","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"SetBuilders Usage","category":"page"},{"location":"#Contents","page":"SetBuilders Documentation","title":"Contents","text":"","category":"section"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"","category":"page"},{"location":"","page":"SetBuilders Documentation","title":"SetBuilders Documentation","text":"SetBuilders Github Repository: .","category":"page"},{"location":"operations/#Set-Operations","page":"Set Operations","title":"Set Operations","text":"","category":"section"},{"location":"operations/","page":"Set Operations","title":"Set Operations","text":"It explores conventional set operations like union, intersection, difference, symmetric difference, and complement. If \"B = @setbuild(x ∈ I, 1 < x < 5)\", then creating an intersection \"C = A ∩ B\" would result in \"2 in C\" being true, but \"1 in C\" false.","category":"page"}]
}
