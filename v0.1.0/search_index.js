var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SetBuilders","category":"page"},{"location":"#SetBuilders","page":"Home","title":"SetBuilders","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SetBuilders.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SetBuilders]","category":"page"},{"location":"#SetBuilders.@setconvert-Tuple{Any, Any, Any, Vararg{Any}}","page":"Home","title":"SetBuilders.@setconvert","text":"A set converter from a set to another\n\nstruct MyStruct\n    a\nend\n\nI = SB_SET_INT\nS = setfromtype(MyStruct)\n\nA = @setconvert(y in S, x -> mystruct(x), y -> y.a, x in I,\n                mystruct=MyStruct)\n\nis similar to the mathematical set notation of \n\nA = {y ∈ S | y = MyStruct(x) and x = y.a where x ∈ I}\n\n@assert MyStruct(1) in A\n@assert !(MyStruct(1.0) in A)\n\n, and where I is the integer set and S is the set of all possible\nMyStruct objects. SB_SET_INT is a pre-defined set in SetBuilders.jl\npackage for all Julia integer data types such as Int64 and Int32.\n\n\n\n\n\n","category":"macro"},{"location":"#SetBuilders.@setenum-Tuple","page":"Home","title":"SetBuilders.@setenum","text":"A enumerated set builder\n\nA = @setenum([1, 2, 3])\n\nis similar to the mathematical set notation of \n\nA = {1, 2, 3}\n\n@assert 1 in A\n@assert !(0 in A)\n\nThis EnumSet wraps Julia Set objects.\n\n\n\n\n\n","category":"macro"},{"location":"#SetBuilders.@setfilter-Tuple{Any, Any, Vararg{Any}}","page":"Home","title":"SetBuilders.@setfilter","text":"A filtered set builder\n\nI = SB_SET_INT\n\nA = @setfilter((x in I, y in I), x > 0 && y > 0)\n\nis similar to the mathematical set notation of \n\nA = {x ∈ I, y ∈ I | x > 0 and y > 0}\n\n@assert (1, 1) in A\n@assert !((0, 0) in A)\n\n, where I is the integer set. SB_SET_INT is a pre-defined set\nin SetBuilders.jl package for all Julia integer data types\nsuch as Int64 and Int32.\n\n\n\n\n\n","category":"macro"}]
}
